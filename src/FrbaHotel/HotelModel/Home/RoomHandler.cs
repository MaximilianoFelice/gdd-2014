using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.Data.SqlClient;
using ExtensionMethods;
using HotelModel.DB_Conn_DSL;
using HotelModel.User_Permissions;

namespace HotelModel.Home
{
    public class RoomHandler
    {
        
        /* Defining sql accessors: Snippet Autogenerated */
        private static DataSet _rooms;
        private static SqlDataAdapter _rooms_adapter;
        public static SqlDataAdapter rooms_adapter { get { if ((rooms == null) || true); return _rooms_adapter; } }
        public static DataSet rooms{
            get
            {
                if (_rooms == null)
                {
                    _rooms_adapter = (SqlDataAdapter)new SqlQuery("SELECT * FROM BOBBY_TABLES.ACTIVE_ROOMS;").AsDataAdapter().Execute()["ReturnedValues"];
                    _rooms = new DataSet();
                    _rooms_adapter.Fill(_rooms);
                } 
                return _rooms;
            }
        }

        public static void Update(DataRow aRow)
        {
            rooms_adapter.Update(new DataRow[] {aRow});
        }

        public int getActiveUserHotel() {
            return ActiveUser.ChooseHotel();
        }

        public static DataSet filteredSearch(Int32? roomNum, Int32? floor, String location, String type, String descrip)
        {

            SqlFunction func  = new SqlFunction("[BOBBY_TABLES].SP_FILTER_ROOMS")
                                .WithParam("@TypeDesc").As(SqlDbType.VarChar).Value(type)
                                .WithParam("@LocationDesc").As(SqlDbType.VarChar).Value(location)
                                .WithParam("@Descr").As(SqlDbType.VarChar).Value(descrip);
            if(roomNum == null){func.WithParam("@RoomNum").As(SqlDbType.Int).Value(DBNull.Value);}
            else{func.WithParam("@RoomNum").As(SqlDbType.Int).Value(roomNum);}
            if (floor == null) { func.WithParam("@Floor").As(SqlDbType.Int).Value(DBNull.Value); }
            else{func.WithParam("@Floor").As(SqlDbType.Int).Value(floor);}

            SqlResults results = func.Execute();

            return (DataSet)results["ReturnedValues"];
  
        }

        public static RoomHandler newRoom()
        {
            DataRow newR = rooms.Tables[0].NewRow();
            newR["id_hotel"] = -1; //Important!! We set -1 for new hotels
            rooms.Tables[0].Rows.Add(newR);
            return new RoomHandler(newR);
        }

        public static void deleteRoom(DataRow room) {deleteRoom(new RoomHandler(room));}
        public static void deleteRoom(RoomHandler room)
        {
            room.Room.Delete();
            _rooms_adapter.Update(new DataRow[] {room.Room});
        }

        /* Non static members from here */

        private DataRow _roomRow;
        public DataRow Room { get {return _roomRow;} }

        public Boolean setForManteinance(DateTime start, DateTime end, String descr)
        {
            SqlResults results = new SqlStoredProcedure("[BOBBY_TABLES].SP_ROOM_MANTEINANCE")
                                 .WithParam("@IdRoom").As(SqlDbType.Int).Value((int) Room["id_room"])
                                 .WithParam("@Start").As(SqlDbType.DateTime).Value(start)
                                 .WithParam("@End").As(SqlDbType.DateTime).Value(end)
                                 .WithParam("@Descr").As(SqlDbType.VarChar).Value(descr)
                                 .WithParam("@Manteined").As(SqlDbType.Bit).AsOutput()
                                 .Execute();
            return (Boolean)results["@Manteined"];

        }


        
        public RoomHandler(DataRow row)
        {
            _roomRow = row;
        }

        /*public Boolean HasRegimen(int id_reg)
        {
            return regimens.Tables[0].AsEnumerable().Any(x => (int)x["id_regimen"] == id_reg);
        }*/

        public object this[String val]
        {
            get { return Room[val]; }
            set { Room[val] = value; }
        }

        public void Update()
        {
            // Si crea el hotel, primero necesita acomodar algunos valores:
            if ((int)Room["id_room"] == -1)
            {
                /* Obtiene el ID */
                Room["id_room"] = DBNull.Value;
                rooms_adapter.Update(new DataRow[] { Room });
                Room["id_room"] = (int)new SqlQuery("SELECT id_room FROM BOBBY_TABLES.ROOMS WHERE number = '" + Room["number"] + "';").ExecuteScalar(); //+hotel
                Room.AcceptChanges();

            }
            rooms_adapter.Update(new DataRow[] {Room});
            rooms_adapter.Update(rooms);
        }

        public static void getHotelRooms()
        {
            new SqlStoredProcedure("[BOBBY_TABLES].CheckMantenienceStatus")
                                .WithParam("@date").As(SqlDbType.DateTime).Value(DateTime.Today)
                                .Execute();
        }

        public DataSet getRooms()
        {
            SqlResults results = new SqlQuery("SELECT * FROM [BOBBY_TABLES].ROOMS;").Execute();

            return (DataSet)results["ReturnedValues"];

        }


        public DataSet getRoomTypeIdFromDescr(String descr){
            SqlResults results = new SqlQuery("SELECT id_roomtype FROM [BOBBY_TABLES].ROOM_TYPE WHERE descr =" + descr).Execute();
            return (DataSet)results["ReturnedValues"];
        }

        public DataSet getRoomTypesForHotel(Int32 id_hotel) {
            SqlResults results = new SqlQuery("SELECT DISTICT rt.descr FROM [BOBBY_TABLES].ROOM_TYPE rt"
                                                + "JOIN [BOBBY_TABLES].ROOMS r ON r.id_roomtype= rt.id_roomtype"
                                                + "AND r.id_hotel = " + id_hotel).Execute();
            return (DataSet)results["ReturnedValues"];
        }

        /*public Boolean roomExists(Int32 roomNum, Int32 idHotel) {

            SqlResults results = new SqlStoredProcedure("[BOBBY_TABLES].SP_ROOM_EXISTS")
                                    .WithParam("@RoomNum").As(SqlDbType.Int).Value(roomNum)
                                    .WithParam("@IdHotel").As(SqlDbType.Int).Value(idHotel)
                                    .WithParam("@RoomExists").As(SqlDbType.Bit).AsOutput()
                                    .Execute();

            return (Boolean)results["@RoomExists"];
        
        }*/

        public bool roomExists(Int32 roomNum, Int32 idHotel)
        {
            DataTable dt = this.getRooms().Tables[0];
            Boolean returnValue = false; ;
            foreach (DataRow row in dt.Rows)
            {
                if ((Int32)row["number"] == roomNum && (Int32)row["id_hotel"] == idHotel)
                {
                    returnValue = true;
                }

            }
            return returnValue;

        }

        public Boolean insertRoom(Int32 idHotel, Int32 roomNum, Int32 floor, Int32 location, Int32 type, String descrip)
        {
        
         SqlResults results = new SqlStoredProcedure("[BOBBY_TABLES].SP_INSERT_ROOM")
                                .WithParam("@IdHotel").As(SqlDbType.Int).Value(idHotel)
                                .WithParam("@RoomNum").As(SqlDbType.Int).Value(roomNum)
                                .WithParam("@Floor").As(SqlDbType.Int).Value(floor)
                                .WithParam("@TypeDesc").As(SqlDbType.Int).Value(type)
                                .WithParam("@LocationDesc").As(SqlDbType.Int).Value(location)
                                .WithParam("@Descr").As(SqlDbType.VarChar).Value(descrip)
                                .WithParam("@Inserted").As(SqlDbType.Bit).AsOutput()
                                .Execute();

            return (Boolean)results["@Inserted"];
        }


        public Boolean updateRoom(Int32 idHotel, Int32 roomNum, Int32 floor, String location, String type, String descrip)
        {

            SqlResults results = new SqlStoredProcedure("[BOBBY_TABLES].SP_UPDATE_ROOM")
                                   .WithParam("@IdHotel").As(SqlDbType.Int).Value(idHotel)
                                   .WithParam("@RoomNum").As(SqlDbType.Int).Value(roomNum)
                                   .WithParam("@Floor").As(SqlDbType.Int).Value(floor)
                                   .WithParam("@TypeDesc").As(SqlDbType.VarChar).Value(type)
                                   .WithParam("@LocationDesc").As(SqlDbType.VarChar).Value(location)
                                   .WithParam("@Descr").As(SqlDbType.VarChar).Value(descrip)
                                   .WithParam("@Updated").As(SqlDbType.Bit).AsOutput()
                                   .Execute();

            return (Boolean)results["@Updated"];
        }



        public DataSet filteredSearch(Int32 idHotel, Int32? roomNum, Int32? floor, Int32 location, Int32 type, String descrip)
        {

            SqlResults results = new SqlFunction("[BOBBY_TABLES].SP_FILTER_ROOMS")
                                .WithParam("@IdHotel").As(SqlDbType.Int).Value(idHotel)
                                .WithParam("@RoomNum").As(SqlDbType.Int).Value(roomNum)
                                .WithParam("@Floor").As(SqlDbType.Int).Value(floor)
                                .WithParam("@TypeDesc").As(SqlDbType.Int).Value(type)
                                .WithParam("@LocationDesc").As(SqlDbType.Int).Value(location)
                                .WithParam("@Descr").As(SqlDbType.VarChar).Value(descrip)
                                .Execute();

            return (DataSet)results["ReturnedValues"];

        }


        public Boolean deleteRoom(Int32 id_room)
        {

            SqlResults results = new SqlStoredProcedure("[BOBBY_TABLES].SP_DELETE_ROOM")
                                   .WithParam("@IdRoom").As(SqlDbType.Int).Value(id_room)
                                   .WithParam("@Deleted").As(SqlDbType.Bit).AsOutput()
                                   .Execute();             

            return (Boolean)results["@Deleted"];
        }


    }
}
